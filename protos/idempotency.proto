syntax = "proto3";

//option csharp_namespace = "Grpc.openIdempotency.V1";
//option go_package = "google.golang.org/grpc/health/grpc_health_v1";
//option java_multiple_files = true;
//option java_outer_classname = "HealthProto";
//option java_package = "io.grpc.health.v1";

package openIdempotency;

import "google/protobuf/empty.proto";
//import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

service OpenIdempotency {
    // rpc StreamCheck(stream IdempotencyRequest) returns (stream IdempotencyStructure);
    // rpc StreamSaveStage(stream IdempotencyDataSaveRequest) returns(stream google.protobuf.Empty );
    rpc Delete(IdempotencyRequest) returns (google.protobuf.Empty);
    rpc Check(IdempotencyRequest) returns (IdempotencyStructure);
    rpc SaveStage(IdempotencyDataSaveRequest) returns(google.protobuf.Empty);
    rpc Complete(IdempotencyCompleteRequest) returns(google.protobuf.Empty);
    rpc Config(google.protobuf.Empty) returns (ApiConfig);
}

enum ApiType{
    API_TYPE_GRPC = 0;
    API_TYPE_REST = 1;
}

message ApiConfig{
    ApiType api = 1;
}

enum MessageStatus {
    None = 0;
    In_Progress = 1;
    Completed = 2;
    Failed= 3;
}


message IdempotencyId {
    string id = 1;
    string app_id = 2;
}

message IdempotencyRequest {
    IdempotencyId id = 1;
    int64 customTTL = 2;
}

message IdempotencyDataSaveRequest {
    IdempotencyId id = 1;
    string data = 2;
    string stage = 3;
    int64 customTTL = 4;
}

message IdempotencyCompleteRequest {
    IdempotencyId id = 1;
    string data = 2;
}


message IdempotencyData {
    IdempotencyId id = 1;
    string data = 2;
}

message IdempotencyStructure {
    MessageStatus status = 1;
    IdempotencyData message = 2;
}

// Pulled from https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto
// custom import is not supported
// https://github.com/grpc/grpc/blob/master/doc/statuscodes.md
message  Status {
    // A simple error code that can be easily handled by the
    // client. The actual error code is defined by
    // `google.rpc.Code`.
    int32 code = 1;

    // A developer-facing human-readable error message in
    // English. It should both explain the error and offer an
    // actionable resolution to it.
    string message = 2;

    // Additional error information that the client code can
    // use to handle the error, such as retry info or a help
    // link.
    repeated Any details = 3;
}


// Max_connection_age and Max_connection_age_grace with client side keepAliveTime should be active
// may find wait-for-ready useful
// steaming is zero to many messages
// Grpc bidi how do both sides know a commit happened
// Ensure Flow control send the amount the network or the receiver can handle
// Because messages are ordered you know what order things happened in, unary cant do this natively
// servers may need to implement retries and tracing can be muddled
// resumption key? idempotency? full duplex use half-close
// be aware full-duplex no rest conversion and could deadlock,but if one side receiving then your mostly good

message Any {
    // A URL/resource name that uniquely identifies the type of the serialized
    // protocol buffer message. This string must contain at least
    // one "/" character. The last segment of the URL's path must represent
    // the fully qualified name of the type (as in
    // `path/google.protobuf.Duration`). The name should be in a canonical form
    // (e.g., leading "." is not accepted).
    //
    // In practice, teams usually precompile into the binary all types that they
    // expect it to use in the context of Any. However, for URLs which use the
    // scheme `http`, `https`, or no scheme, one can optionally set up a type
    // server that maps type URLs to message definitions as follows:
    //
    // * If no scheme is provided, `https` is assumed.
    // * An HTTP GET on the URL must yield a [google.protobuf.Type][]
    //   value in binary format, or produce an error.
    // * Applications are allowed to cache lookup results based on the
    //   URL, or have them precompiled into a binary to avoid any
    //   lookup. Therefore, binary compatibility needs to be preserved
    //   on changes to types. (Use versioned type names to manage
    //   breaking changes.)
    //
    // Note: this functionality is not currently available in the official
    // protobuf release, and it is not used for type URLs beginning with
    // type.googleapis.com.
    //
    // Schemes other than `http`, `https` (or the empty scheme) might be
    // used with implementation specific semantics.
    //
    string type_url = 1;

    // Must be a valid serialized protocol buffer of the above specified type.
    bytes value = 2;
}
